generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
  id       String @id @default(uuid())
  name     String
  imageId  String
  imageUrl String
  priority Int

  institutions Institution[]

  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?
}

model Subcategory {
  id       String @id @default(uuid())
  name     String
  priority Int

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @unique

  items Item[]
}

model Category {
  id              String @id @default(uuid())
  name            String
  priority        Int
  imageId         String
  imageUrl        String
  backgroundColor String

  institutions  Institution[]
  subcategories Subcategory[]
}

model Public {
  id       String @id @default(uuid())
  name     String
  imageId  String
  imageUrl String

  Institutions Institution[]
}

model InstitutionType {
  id       String @id @default(uuid())
  name     String
  imageId  String
  imageUrl String

  Institutions Institution[]
}

model Institution {
  id                     String   @id @default(uuid())
  deliverInfo            String
  description            String
  generalAddress         String
  lat                    String
  lon                    String
  institutionName        String
  institutionPhone       Int
  quantity               String
  responsiblePersonEmail String
  responsiblePersonName  String
  responsiblePersonPhone String
  site                   String
  workingDays            String
  bankInfo               String
  customNeed             String
  customService          String
  crowdfunding           String
  corporateName          String
  cnpj                   String
  isVerified             Boolean  @default(false)
  createdAt              DateTime @default(now())

  profileImageId    String
  profileImageUrl   String
  galleryImagesIds  String[]
  galleryImagesUrls String[]

  publicType                Public                  @relation(fields: [publicTypeId], references: [id])
  publicTypeId              String                  @unique
  institutionType           InstitutionType         @relation(fields: [institutionTypeId], references: [id])
  institutionTypeId         String                  @unique
  institutionVerification   InstitutionVerification @relation(fields: [institutionVerificationId], references: [id], onDelete: Cascade)
  institutionVerificationId String                  @unique

  items      Item[]
  categories Category[]
}

// InstitutionVerification
model StageOne {
  id                String    @id @default(uuid())
  user              User?     @relation(fields: [responsibleUserId], references: [id])
  responsibleUserId String?   @unique
  date              DateTime?
  notes             String?
  status            Int       @default(2)

  institutionVerification   InstitutionVerification @relation(fields: [institutionVerificationId], references: [id], onDelete: Cascade)
  institutionVerificationId String                  @unique
}

model StageTwo {
  id String @id @default(uuid())

  user              User?   @relation(fields: [responsibleUserId], references: [id], onDelete: Cascade)
  responsibleUserId String? @unique

  date   DateTime?
  notes  String?
  status Int       @default(2)

  searchStateStatus Int     @default(2)
  searchStateResult String?

  searchFederalStatus Int     @default(2)
  searchFederalResult String?

  searchLaboristStatus Int     @default(2)
  searchLaboristResult String?

  searchUnionStatus Int     @default(2)
  searchUnionResult String?

  institutionVerification   InstitutionVerification @relation(fields: [institutionVerificationId], references: [id])
  institutionVerificationId String                  @unique
}

model StaegeThree {
  id                String    @id @default(uuid())
  user              User?     @relation(fields: [responsibleUserId], references: [id])
  responsibleUserId String?   @unique
  date              DateTime?
  notes             String?
  status            Int       @default(2)
  stageOneReview    Boolean   @default(false)
  stageTwoReview    Boolean   @default(false)

  institutionVerification   InstitutionVerification @relation(fields: [institutionVerificationId], references: [id], onDelete: Cascade)
  institutionVerificationId String                  @unique
}

model InstitutionVerification {
  id          String       @id @default(uuid())
  institution Institution?

  stageOne   StageOne?
  stageTwo   StageTwo?
  stageThree StaegeThree?
}

// role: ['Coordenador', 'Jurídico', 'Ações']
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  role      String[]
  createdAt DateTime @default(now())

  StageOne    StageOne?
  StageTwo    StageTwo?
  StaegeThree StaegeThree?
}
